.page2-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
  
    .grid-item {
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: #f0f0f0;
      border-radius: 4px;
      padding: 16px;
      color: #fff;
      font-weight: bold;
      font-size: 24px;
      transition: background-color 0.3s ease-in-out;
  
      &.active {
        background-color: #1890ff;
      }
    }
  
    .button-group {
      margin-top: 16px;
      display: flex;
  
      > button {
        margin: 0 8px;
      }
    }
  }
  






















import React, { useState } from 'react';
import { Button, Row, Col } from 'antd';
import {
  CaretLeftOutlined,
  CaretRightOutlined,
  CaretUpOutlined,
  CaretDownOutlined,
} from '@ant-design/icons';

function Page2() {
  const [gridPosition, setGridPosition] = useState({ row: 1, col: 1 });
  const [numberPosition, setNumberPosition] = useState(1);

  const handleMoveLeft = () => {
    if (gridPosition.col > 1) {
      setGridPosition((prevPosition) => ({ ...prevPosition, col: prevPosition.col - 1 }));
      setNumberPosition((prevNumber) => prevNumber - 1);
    } else if (gridPosition.row === 1 && gridPosition.col === 1) {
      setGridPosition({ row: 2, col: 3 });
      setNumberPosition(6);
    } else if (gridPosition.row === 2 && gridPosition.col === 1) {
      setGridPosition({ row: 1, col: 3 });
      setNumberPosition(3);
    }
  };

  const handleMoveRight = () => {
    if (gridPosition.col < 3) {
      setGridPosition((prevPosition) => ({ ...prevPosition, col: prevPosition.col + 1 }));
      setNumberPosition((prevNumber) => prevNumber + 1);
    } else if (gridPosition.row === 1 && gridPosition.col === 3) {
      setGridPosition({ row: 2, col: 1 });
      setNumberPosition(4);
    } else if (gridPosition.row === 2 && gridPosition.col === 3) {
      setGridPosition({ row: 1, col: 1 });
      setNumberPosition(1);
    } else {
      setGridPosition({ row: 2, col: 1 });
      setNumberPosition(2);
    }
  };

  const handleMoveUp = () => {
    if (gridPosition.row > 1) {
      setGridPosition((prevPosition) => ({ ...prevPosition, row: prevPosition.row - 1 }));
      setNumberPosition((prevNumber) => prevNumber - 3);
    } else {
      setGridPosition((prevPosition) => ({ ...prevPosition, row: 2 }));
      setNumberPosition((prevNumber) => prevNumber + 3);
    }
  };

  const handleMoveDown = () => {
    if (gridPosition.row < 2) {
      setGridPosition((prevPosition) => ({ ...prevPosition, row: prevPosition.row + 1 }));
      setNumberPosition((prevNumber) => prevNumber + 3);
    } else {
      setGridPosition((prevPosition) => ({ ...prevPosition, row: 1 }));
      setNumberPosition((prevNumber) => prevNumber - 3);
    }
  };

  const handleRandomPosition = () => {
    const randomRow = Math.floor(Math.random() * 2) + 1;
    const randomCol = Math.floor(Math.random() * 3) + 1;
    setGridPosition({ row: randomRow, col: randomCol });
    setNumberPosition(randomRow === 1 ? randomCol : randomCol + 3);
  };

  return (
    <div className="page2-container">
      <Row gutter={[16, 16]}>
      <Col span={8}>
          <div
            style={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              backgroundColor: gridPosition.row === 1 && gridPosition.col === 1 ? '#1890ff' : '#f0f0f0',
              borderRadius: 4,
              padding: 16,
              color: '#fff',
              fontWeight: 'bold',
              fontSize: 24,
            }}
          >
            {numberPosition}
          </div>
        </Col>
        <Col span={8}>
          <div
            className={`grid-item ${gridPosition.row === 1 && gridPosition.col === 1 ? 'active' : ''}`}
          >
            1
          </div>
        </Col>
        <Col span={8}>
          <div
            className={`grid-item ${gridPosition.row === 1 && gridPosition.col === 2 ? 'active' : ''}`}
          >
            2
          </div>
        </Col>
        <Col span={8}>
          <div
            className={`grid-item ${gridPosition.row === 1 && gridPosition.col === 3 ? 'active' : ''}`}
          >
            3
          </div>
        </Col>
        <Col span={8}>
          <div
            className={`grid-item ${gridPosition.row === 2 && gridPosition.col === 1 ? 'active' : ''}`}
          >
            4
          </div>
        </Col>
        <Col span={8}>
          <div
            className={`grid-item ${gridPosition.row === 2 && gridPosition.col === 2 ? 'active' : ''}`}
          >
            5
          </div>
        </Col>
        <Col span={8}>
          <div
            className={`grid-item ${gridPosition.row === 2 && gridPosition.col === 3 ? 'active' : ''}`}
          >
            6
          </div>
        </Col>
      </Row>
        <div className="button-group">
          <Button type="primary" shape="round" icon={<CaretLeftOutlined />} onClick={handleMoveLeft} />
          <Button type="primary" shape="round" icon={<CaretRightOutlined />} onClick={handleMoveRight} />
          <Button type="primary" shape="round" icon={<CaretUpOutlined />} onClick={handleMoveUp} />
          <Button type="primary" shape="round" icon={<CaretDownOutlined />} onClick={handleMoveDown} />
          <Button type="primary" shape="round" onClick={handleRandomPosition}>Random Position</Button>
        </div>
    </div>
  );
}

export default Page2;


  